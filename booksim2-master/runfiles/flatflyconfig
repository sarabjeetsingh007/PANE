// $Id $

// Copyright (c) 2007-2015, Trustees of The Leland Stanford Junior University
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.

///////////////////BEGIN IMMUTABLE////////////////////////////////
//
// Flow control
//
read_request_begin_vc  = 0;
read_request_end_vc    = 5;
write_reply_begin_vc   = 2;
write_reply_end_vc     = 7;
read_reply_begin_vc    = 8;
read_reply_end_vc      = 12;
write_request_begin_vc = 10;
write_request_end_vc   = 15;

// Total number of VCs must match the above assignments
num_vcs     = 16;
vc_buf_size = 8;

wait_for_tail_credit = 0;

//
// Router architectureq
//
vc_allocator = max_size; 
sw_allocator = max_size;
alloc_iters  = 2;

credit_delay   = 2;
routing_delay  = 0;
vc_alloc_delay = 1;
sw_alloc_delay = 1;
st_final_delay = 1;

input_speedup     = 1;
output_speedup    = 1;
internal_speedup  = 1.0;

//
// Traffic
//

sim_type = latency;

warmup_periods = 3;


sim_count          = 1;

///////////////////END IMMUTABLE////////////////////////////////



// Flatfly 
//
// #node = k^(n+1)
//
// x, y, specifies the arrangement of routers in x and y dim
// xr, yr specifiies the arayment of clients in a router
//
topology = flatfly;
subnets = 1;

c  = 4;
k  = 4;
n  = 2;

x  = 4;
y  = 4;
xr = 2;
yr = 2;

//the nodes above "limit" does not emit or receiv traffic
limit = 64;


//
// Routing
//

routing_function = ran_min;

packet_size = 1;

traffic       = uniform;

sample_period  = 10000;  

use_read_write = 0;

batch_size = 10000;

injection_rate = 0.78;

sim_type = latency;

speculative = 0;

print_activity = 0;



read_request_size=1;
read_reply_size=4;
write_request_size=4;
write_reply_size=1;

sim_power = 0;
